jalgsg2
Tablas
      
CAMPO    CAMPO    CAMPO
REGISTRO REGISTRO REGISTRO
REGISTRO REGISTRO REGISTRO
REGISTRO REGISTRO REGISTRO
REGISTRO REGISTRO REGISTRO
REGISTRO REGISTRO REGISTRO

Operaciones para procesar datos: 

	Projection = extrae una columna
	Division = extrae filas cuyos valores aparecen en la 
	segunda tabla, pero no columnas que no existen en la seg. Tabla
	Join = Une Todos los registros ->
	Selection = Extrae filas

SET operations: producen filas

	Union = Extrae todo ambas tablas... filas(campos?)
	Cartesian product = reg 1 con n registros de la tabla 2
		         ...reg n con n registros de la tabla 2
	Intersection = Lo comun en ambas tablas.
	Difference = Igual que una resta de conjuntos

Foreing key
	Un codigo o llave de una tabla que lleva a
	una llave primaria en otra tabla.

Pag 50?
	E-R Model

Entidad: Reconocer un objeto en el mundo real.
Relacion: Se da entre entidades.

 Si solo vendo un tipo de fruta a mucha gente seria:
 Ejemplo
     frutas  1 ---< vende_en >--- N exportaciones

Normalización: Hacer todas las tablas separadas por si uno debe
corregir datos. Entonces es más fácil.

  1) Forma normal 1.
	Datos repetidos en una tabla indican que se debe dividir
	la tabla.

  2) Forma 2
	Una llave primaria determina los valores en otras columnas.
	
  3) Forma 3
	Los campos de la tabla se relacionan directamente con 
	la llave; si alguno no lo cumple, la tabla se divide.
  
Foreing key = (Un campo de una tabla) Refers To (una llave primaria 
		de otra tabla).

			E-R MOdel

Muestra las <relaciones> entre las [entidades](un objeto o algo del
mundo real), la relacion de uno a muchos entre cada objeto puede
tener cardinalidad.

   (nombre)(Codigo)             (Export Destination Code) 
    /     /                    /
   [Fruit ]--M--<Sales>--N--[Export Destination]
     /            /              /
   (Precio)   (cantidad)         (Export Destination name)

Un producto se vende en N exportaciones y una exportacion vende 
M productos.

Casos de cardinalidad:

1) 	Una parte de la exportacion maneja un solo pedazo de 
	historia de informacion.

[EXPORT DESTINATION] --1-- <Management> --1-- [EXPORT HISTORY]


2) Uno a N(muchos)
	[REY] -- 1 -- <AYUDA> -- N -- [SIRVIENTES]

3) MANY-TO-MANY RELATIONDHIP
	[] --N-- <> --M-- []

Pag 82

			Pasos para diseñar una Base de Datos

Se pueden dividir el diseño en tres partes:
	Esquema conceptual:
		Comprende la logica de lo que esta en el mundo con
		el uso del modelo ER y la normalizacion de las tablas.

	Esquema interno:
		La base de datos vista desde adentro de la compu. 
		Determina la estructura física de la base, se diseña
		despues de crear los metodos de busqueda rapida.

	Esquema externo:
		La base vista desde el usuario o apps. Se diseña despues
		de crear los datos requeridos por programas de aplicación.

SQL se usa para meter y obtener datos de la base.

- Creacion de tablas
- Entrada y recuperacion de datos
- Manejo de usuarios


			Statements(declaraciones)

Mostrar datos de las tablas.
Ejemplo: para obtener el nombre del producto de la tabla que vale
	 mas de 200 gold

SELECT product_name
FROM product
WHERE unit_price >= 200

tambien se puede extraer todo filtrado por nombre

SELECT *
FROM product
WHERE product_name = 'apple'

Si no se tiene claro el nombre se pueden seleccionar los que terminan en
n usando: '%n'

SELECT *
FROM product
WHERE product_name like '%n'; --En este caso puede tirar LIMON, MELON...

 --Se puede agregar algo para ordenar ascendentemente por precio:

ORDER BY unit_price;

			Mas funciones(funciones de agregacion)

SELECT	AVG(unit_price) --Obtener el promedio de la columna
FROM product;

SUM(column_name), AVG(column_name), MAX(column_name), MIN(column_name), 
COUNT(*), count(column_name), count(DISTINCT column_name) 


			Crear tabla		

Create TABLE product
(
product_code int NOT NULL,
product_name varchar(255),
unit_price int,
PRIMARY KEY(product_code)
);

pag 106 pdf















